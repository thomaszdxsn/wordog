{"pageProps":{"post":{"content":"\n# Python 的 docstring 标准格式是什么？\n\n写下这篇文章的原因是：想知道 `docstring` 的标准是什么，如果没有标准那么通用的惯例是什么？\n\n首先我搜索了「python docstring specification」，找到一篇 [PEP257 — Docstring Conventions](https://www.python.org/dev/peps/pep-0257/ \"PEP257\")。但是通篇读下来，只是介绍了 docstring 标准的用法，我在源代码中看到的那些格式没有在这里体现。\n\n随后在 stackoverflow 找到我要的答案：[ What is the standard Python docstring format? ](https://stackoverflow.com/questions/3898572/what-is-the-standard-python-docstring-format \"What is the standard Python docstring format? \")\n\n## 不同的风格\n\n- Epytext\n\n\t这是从 `javadoc` 沿袭的一种风格，可以被 [Epydoc](http://epydoc.sourceforge.net/ \"Epydoc文档\") 使用来生成文档。\n\n\t示例：\n\n\t```python\n\t\"\"\"\n\tThis is a javadoc style.\n\n\t@param param1: this is a first param\n\t@param param2: this is a second param\n\t@return: this is a description of what is returned\n\t@raise keyError: raises an exception\n\t\"\"\"\n\t```\n\n- reST\n\n\t目前使用最广的格式应该是 `reStructuredText(reST)`，通常配合 [Sphinx](http://sphinx-doc.org/) 用来生成文档。\n\n\t示例：\n\n\t```python\n\t\"\"\"\n\tThis is a reST style.\n\n\t:param param1: this is a first param\n\t:param param2: this is a second param\n\t:returns: this is a description of what is returned\n\t:raises keyError: raises an exception\n\t\"\"\"\n\t```\n\n- Google\n\n\tGoogle 公司有一套他们自己的格式，写在了[google/styleguide/pyguide.md](https://github.com/google/styleguide/blob/gh-pages/pyguide.md#38-comments-and-docstrings)。通过插件，也可以使用 sphinx 来生成文档。\n\n\t示例：\n\n\t```python\n\t\"\"\"\n\tThis is a Google style.\n\n\tArgs:\n\t\tparam1: This is the first param.\n\t\tparam2: This is a second param.\n\n\tReturns:\n\t\tThis is a description of what is returned.\n\n\tRaises:\n\t\tKeyError: Raises an exception.\n\t\"\"\"\n\t```\n\n- Numpydoc\n\n\tNumpy 团队基于 Google style 发展了一套风格。\n\n\t```python\n\t\"\"\"\n\tThis is Numpy style.\n\n\tParameters\n\t----------\n\tfirst : array_like\n\t\tthe 1st param name `first`\n\tsecond :\n\t\tthe 2nd param\n\tthird : {'value', 'other'}, optional\n\t\tthe 3rd param, by default 'value'\n\n\tReturns\n\t-------\n\tstring\n\t\ta value in a string\n\n\tRaises\n\t------\n\tKeyError\n\t\twhen a key error\n\tOtherError\n\t\twhen an other error\n\t\"\"\"\n\t```\n\n## Pycharm 中生成 docstring stub\n\nPycharm 在鼠标移动到函数名的时候会有一个 action -\\>「insert document string stub」，可以自动为函数生成基本的 docstring 格式。\n\n但是默认的格式不是固定的，最早我的电脑会生成 reST 格式，最近生成的却是 Epytext。\n\n通过 [Pycharm用户手册](https://www.jetbrains.com/help/pycharm/settings-tools-python-integrated-tools.html)可以查到是怎么设置默认的 docstring style：\n\n- File | Settings | Tools | Python Integrated Tools for Windows and Linux\n- PyCharm | Preferences | Tools | Python Integrated Tools for macOS\n\n## PEP257 内容简要\n\n- 为所有的公共 modules, functions, classes, methods 编写 docstring。非公共的方法不需要编写 docstring，不过你应该在 `def` 语句下面用一行注释描述这个方法要做什么。\n- 多行格式中，最后结尾的 `\"\"\"` 应该算单独一行。\n\n## 总结\n\n不同的 Python 源代码有不同的注释风格。在 Werkzeug 中，每个函数都通过 docstring 进行了文档式描述，而且通过 sphinx 使用 docstring 生成了最终的文档。\n\n而 Django 只在需要的地方进行了描述（很多时候用的是普通的注释，写在相关代码的周围），并不是每个函数都有 docstring。\n\n并没有谁更正确之分，只要团队成员都接受，那就是正确的。\n\n","author":"thomaszdxsn","title":"Python docstring 的标准格式是什么？","slug":"what-is-python-docstring","tag":"python,docstring","date":"2020-4-19"}},"__N_SSG":true}